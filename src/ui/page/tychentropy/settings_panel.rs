use dioxus::prelude::*;
use tychentropy::{domain::process::input::TychentropyNewInput, Tychentropy};

use crate::ui::{
    components::number_selector::NumberSelector,
    view_model::tychentropy_page::TychentropyPageViewModel,
};

#[component]
pub fn TychentropyPageSettingsPanel() -> Element {
    let mut range_and_target_entropy_bytes_accepted_in_ui =
        use_context::<TychentropyPageViewModel>().range_and_target_entropy_bytes_accepted;
    let local_view_range = use_context::<TychentropyPageViewModel>().range_local_view;
    let local_view_target_entropy_bytes =
        use_context::<TychentropyPageViewModel>().target_entropy_bytes_local_view;
    let core_range = *use_context::<Signal<Tychentropy>>().read().get_range();
    let core_target_entropy_bytes = *use_context::<Signal<Tychentropy>>()
        .read()
        .get_target_entropy_bytes();
    let are_range_and_num_bytes_valid = local_view_range.read().to_owned() > 2 && local_view_target_entropy_bytes.read().to_owned() > 0;
    rsx! {
        div { class: "flex flex-row h-28 px-2 w-full",
            span { class: "flex flex-row",
                button {
                    class: "generic_button h-full w-40 rounded-tl-xl rounded-bl-xl rounded-tr-none rounded-br-none",
                    disabled: !are_range_and_num_bytes_valid,
                    onclick: move |_| {
                        let current = range_and_target_entropy_bytes_accepted_in_ui.read().to_owned();
                        match current {
                            true => {}
                            false => {
                                let tychentropy_input = TychentropyNewInput::new(
                                        local_view_range.read().to_owned(),
                                        local_view_target_entropy_bytes.read().to_owned(),
                                    )
                                    .unwrap();
                                let new_tychentropy = Tychentropy::new(tychentropy_input);
                                use_context::<Signal<Tychentropy>>()
                                    .write()
                                    .put_data_from_another_tychentropy(new_tychentropy);
                            }
                        }
                        range_and_target_entropy_bytes_accepted_in_ui.set(!current)
                    },
                    if range_and_target_entropy_bytes_accepted_in_ui.read().to_owned() {
                        "Change Settings"
                    } else {
                        "Accept Settings"
                    }
                }
                div { class: "flex flex-row border-second_color h-full w-fit border-[1px] items-center justify-start",
                    NumberSelector {
                        title: "Range".to_string(),
                        comments: "This is the maximum natural number that can be generated by your source of entropy. Think of it as how many sides your dice has which must be equal or more than 2."
                            .to_string(),
                        min: Some(2),
                        max: None,
                        local_val_view_hook: local_view_range,
                        core_val: core_range,
                        disabled: range_and_target_entropy_bytes_accepted_in_ui,
                    }
                    NumberSelector {
                        title: "Entropy bytes".to_string(),
                        comments: "This is to indicate how many bytes of entropy you want to produce which must be equal or more than 1. If you choose 16, 20, 24, 28 and 32, you will have a respectively 12, 15, 18, 21 and 24 words BIP39 mnemonic generated for you."
                            .to_string(),
                        min: Some(1),
                        max: None,
                        local_val_view_hook: local_view_target_entropy_bytes,
                        core_val: core_target_entropy_bytes,
                        disabled: range_and_target_entropy_bytes_accepted_in_ui,
                    }
                }
                button {
                    class: "generic_button h-full w-40 rounded-tl-none rounded-bl-none rounded-tr-xl rounded-br-xl",
                    onclick: move |_| {
                        use_context::<Signal<Tychentropy>>().write().reset_data();
                    },
                    disabled: !range_and_target_entropy_bytes_accepted_in_ui.read().to_owned(),
                    "Reset Data"
                }
            }
        }
    }
}
